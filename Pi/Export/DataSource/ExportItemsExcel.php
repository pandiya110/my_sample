<?php

namespace CodePi\Export\DataSource;

use PHPExcel;
use PHPExcel_Worksheet;
use PHPExcel_IOFactory;
use PHPExcel_Style_Border,
    PHPExcel_Style_Alignment,
    PHPExcel_Style_Fill;
use PHPExcel_Style_NumberFormat;
use PHPExcel_Cell_DataType;
use PHPExcel_Helper_HTML;
use CodePi\Base\Libraries\PiLib;
use CodePi\Items\DataSource\ItemsDataSource;
use CodePi\Users\DataSource\UsersData;
use CodePi\Export\DataSource\ExportData;
use CodePi\Base\Libraries\DefaultIniSettings;
use CodePi\Base\Eloquent\Events;
use CodePi\ItemsActivityLog\Logs\ActivityLog;
use CodePi\ImportExportLog\Commands\ImportExportLog;
use CodePi\Base\Commands\CommandFactory;

class ExportItemsExcel {
    /**
     *
     * @var Instance of  ExportItems Command
     */
    private $objCommand;
    /**
     *
     * @var Array Excel header style 
     */
    private $headerStyle;
    /**
     *
     * @var Array Data cell style 
     */
    private $dataStyle;
    /**
     *
     * @var Int
     */
    private $headerType;
    /**
     *
     * @var  instanceof PHPExcel_Worksheet
     */
    private $objSheet;
    /**
     *
     * @var String
     */
    private $trackingID;
    /**
     * 
     * @param PHPExcel_Worksheet $objSheet
     * @param type $objCommand
     * @param type $headerStyle
     * @param type $dataStyle
     * @param type $headerType
     */
    function __construct($objSheet = null, $objCommand, $headerStyle, $dataStyle, $headerType) {
        $this->objCommand = $objCommand;
        $this->headerStyle = $headerStyle;
        $this->dataStyle = $dataStyle;
        $this->headerType = $headerType;
        $this->trackingID = mt_rand() . time();
        if ($objSheet instanceof PHPExcel_Worksheet) {
            $this->objSheet = $objSheet;
        }
    }

    /**
     * Generate Excel
     * @return worksheet
     */
    function getExportData() {

        DefaultIniSettings::apply();
        $this->objCommand->exportSheetIndex = $this->headerType;
        $objExport = new ExportData($this->objCommand);
        $exportData = $objExport->getData();
        if (!empty($exportData)) {
            $currencyFormat = $this->getCurrencyFormatColumns();
            $excelHeaders = array_keys(isset($exportData[0]) ? $exportData[0] : []);
            $cells = $this->getExcelCells(count($excelHeaders) * 2);
            $i = 0;
            $j = 3;
            $columnValue = array();
            $html = ' Generated by: <b>' . $this->getExportUser($this->objCommand->last_modified_by) . '</b> Date: <b>' . date('m-d-Y') . '</b>';
            $wizard = new PHPExcel_Helper_HTML;
            $richText = $wizard->toRichTextObject(mb_convert_encoding(html_entity_decode($html), 'HTML-ENTITIES', 'UTF-8'));
            $this->objSheet->setCellValue('A1', $richText);
            if (isset($excelHeaders[0])) {
                unset($excelHeaders[0]);
            }
            foreach ($excelHeaders as $key => $column) {
                if (trim(strtolower($column)) == 'versions') {
                    $this->objSheet->getColumnDimension($cells[$i])->setWidth('70');
                } else {
                    $this->objSheet->getColumnDimension($cells[$i])->setAutoSize(true);
                }
                $this->objSheet->setCellValue($cells[$i] . '2', $column);
                $this->objSheet->getStyle($cells[$i] . '2')->applyFromArray($this->headerStyle);
                $this->objSheet->getRowDimension('2')->setRowHeight(15);
                $columnValue[$key] = $cells[$i];
                $i++;
            }

            foreach ($exportData as $row) {

                $this->objSheet->getRowDimension($j)->setRowHeight(15);
                foreach ($excelHeaders as $columnKey => $value) {

                    $isExcluded = $row['is_excluded'];
                    $excelValue = '';
                    $excelValue = isset($row[$value]) ? $row[$value] : "";

                    /**
                     * if export type is Excel , entire row will be strike through, if the items are excluded
                     */
                    if ($isExcluded == true) {
                        $this->objSheet->getStyle($columnValue[$columnKey] . $j)->getFont()->setStrikethrough(true);
                    }
                    /**
                     * if export type is CSV, Ad Block column value will be ZDELETE, if the items are excluded
                     */
                    if (isset($this->objCommand->type) && $this->objCommand->type != 1 && $isExcluded == true && trim(strtolower($value)) == 'ad block') {
                        $excelValue = 'ZDELETE';
                    }
                    /**
                     * Set currency format
                     */
                    if (in_array($value, $currencyFormat)) {
                        $this->objSheet->getStyle($columnValue[$columnKey] . $j)->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_CURRENCY_USD_SIMPLE);
                    }

                    if (strtoupper(trim($value)) == 'SOURCE') {
                        $excelValue = ($excelValue == '1') ? 'Import' : 'IQS';
                    }
                    /**
                     * Set Upc & GTIN value change to number to text
                     */
                    if (strtoupper(trim($value)) == 'UPC NBR' || strtoupper(trim($value)) == 'GTIN NBR') {
                        $this->objSheet->getStyle($columnValue[$columnKey] . $j)->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
                    }
                    $this->objSheet->getStyle($columnValue[$columnKey] . $j)->applyFromArray($this->dataStyle);
                    $this->objSheet->setCellValue($columnValue[$columnKey] . $j, trim($excelValue, '='));
                }
                $j++;
            }

            unset($excelHeaders, $exportData, $columnValue, $currencyFormat);
        }
        return $this->objSheet;
    }

    /**
     * Generate Excel Cells
     * 
     * @param type $max
     * @return array
     */
    function getExcelCells($max) {
        $cells = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
        for ($i = 0; $i < 26; $i++) {
            for ($j = 0; $j < 26; $j++) {
                array_push($cells, $cells[$i] . $cells[$j]);
            }
        }
        $cell_array = array();
        for ($i = 0; $i < $max; $i++) {
            array_push($cell_array, $cells[$i]);
        }
        return $cell_array;
    }

    /**
     * Get Looged users info 
     * 
     * @paramint $userId
     * @return collection
     */
    function getExportUser($userId) {
        $strUserName = '';
        $objUsers = new UsersData();
        $params['id'] = $userId;
        $objCollection = $objUsers->getUsersDetails($params);
        foreach ($objCollection as $row) {
            $strUserName = PiLib::mbConvertEncoding($row->firstname) . ' ' . PiLib::mbConvertEncoding($row->lastname);
        }
        return $strUserName;
    }

    /**
     * Get Currency format columns from item headers table
     * 
     * @return array
     */
    function getCurrencyFormatColumns() {
        $objItemsDs = new ItemsDataSource();
        $arrHeaders = $objItemsDs->getItemDefaultHeaders($type = 0);
        $headers = [];
        foreach ($arrHeaders as $header) {
            if ($header['format'] == '1') {
                $headers[] = trim($header['name']);
            }
        }
        return $headers;
    }
    /**
     * 
     * @return type
     */
    public function getEventName() {
        $objEvents = new Events();
        $objCollection = $objEvents->where('id', $this->objCommand->event_id)->first();
        $strEventName = PiLib::mbConvertEncoding($objCollection->name);
        return $strEventName;
    }
    /**
     * 
     * @param type $exportResponse
     * @param type $activityLog
     * @return boolean
     */
    function saveExportLog($exportResponse, $activityLog = false) {
        $inputValue = $this->objCommand->dataToArray();
        $sysLogData['params'] = $inputValue;
        $sysLogData['master_id'] = isset($inputValue['event_id']) ? $inputValue['event_id'] : 0;
        $sysLogData['response'] = !empty($exportResponse) ? $exportResponse : [];
        $sysLogData['message'] = isset($exportResponse['status']) && !empty($exportResponse['status']) ? 'Items Exported Successfully' : 'Failed to Export items. Try again..!';
        $sysLogData['filename'] = isset($exportResponse['filename']) ? PiLib::piDecrypt($exportResponse['filename']) : '';
        $sysLogData['action'] = isset($sysLogData['action']) ? $sysLogData['action'] : 'Export';
        $importCmd = new ImportExportLog($sysLogData);
        $response = CommandFactory::getCommand($importCmd);
        unset($sysLogData);
        if ($activityLog) {
            $objLogs = new ActivityLog();
            $logData['events_id'] = isset($inputValue['event_id']) ? $inputValue['event_id'] : 0;
            $logData['actions'] = 'export';
            $logData['users_id'] = isset($inputValue['last_modified_by']) ? $inputValue['last_modified_by'] : 0;
            $logData['type'] = '0';
            $logData['tracking_id'] = $this->trackingID;
            $logData = $objLogs->setActivityLog($logData);
            $objLogs->updateActivityLog($logData);
            unset($logData);
        }
        if (!empty($response)) {
            return $response->id;
        } else {
            return FALSE;
        }
    }

}
